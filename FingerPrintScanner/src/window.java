/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author donal
 */
import arduino.*;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.awt.datatransfer.*;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class window extends javax.swing.JFrame {
//Initalizing Variables and Location of Images and Logos Used
    String location = "attendance.txt";
    String id;
    Arduino ard;
    String port;
    String str = "";
    String filePath = "test.txt";
    String temp = "temp.txt";
    String temp2 = "other.txt";
    ImageIcon numberLogo;
    static String password = "pass.txt";
    ImageIcon icon = new ImageIcon("smallLogo.PNG");

    public window() throws IOException {

        initComponents(); //Creating a new window
        userInputPort();
        jTable1.setEnabled(false);
      //  port = JOptionPane.showInputDialog("Please input the Port the Arduino is Connected to: (i.g COM10)");
        port = "COM10";
        ard = new Arduino(port, 9600);
        //ImageIcon logo = new ImageIcon("smallLogo.PNG");
        //jLabel2.setIcon(logo);
        this.setLocationRelativeTo(null);
        numberLogo = new ImageIcon("wordLogo.PNG");
        jLabel4.setIcon(numberLogo);
        ard.openConnection();
        
        loadTable();

        //System.getProperty("user.home") + "/Desktop";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Donald Shan");

        jButton1.setText("Enroll");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Check In");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete FingerPrint");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Attendance V0.7");

        jButton5.setText("Reset");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton4.setText("Clear All Data");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("Export ");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Reload Table");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Set Location");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(20, 20, 20)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(21, 21, 21)
                                    .addComponent(jLabel1))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(34, 34, 34)
                                    .addComponent(jLabel2)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public static void copyFile(String read, String write) {
        FileInputStream instream = null;
        FileOutputStream outstream = null;

        try {
            File infile = new File(read);
            File outfile = new File(write);

            instream = new FileInputStream(infile);
            outstream = new FileOutputStream(outfile);

            byte[] buffer = new byte[1024];

            int length;
            /*copying the contents from input stream to
    	     * output stream using read and write methods
             */
            while ((length = instream.read(buffer)) > 0) {
                outstream.write(buffer, 0, length);
            }

            //Closing the input/output file streams
            instream.close();
            outstream.close();

            System.out.println("File copied successfully!!");

        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            ard.serialWrite("e");
            boolean flag = false;

            Random r = new Random();
            int id = r.nextInt(127) + 1;
            int m = getDifferentNumber(id, r);

            JOptionPane.showMessageDialog(this, "You have been assigned " + m + " as your ID", "Registration", JOptionPane.INFORMATION_MESSAGE, icon);
            ard.serialWrite(Integer.toString(m));
            registerFinger();
            addnewLine(registerStudent(m));
            removeWhiteSpace();
            copyFile(temp2, filePath);
            clearTable();
            loadTable();
        } catch (IOException ex) {
            Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton1ActionPerformed
    public void clearTable() {
        DefaultTableModel model = new DefaultTableModel();
        jTable1.setModel(model);
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        File file = new File(filePath);
        Scanner scanner = null;
        try {
            scanner = new Scanner(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
        }
        String input = JOptionPane.showInputDialog(this, "Enter Password", "Enter Password");
        String realPass = "";
        try {
            realPass = readFile();
        } catch (IOException ex) {
            Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (input.equals(realPass)) {
            ard.serialWrite("m");
            String delete = JOptionPane.showInputDialog("Enter ID to delete");
            ard.serialWrite(delete);
            int lineNum = 0;
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();

                lineNum++;

                if (line.contains(delete)) {

                    System.out.println("Found on line " + lineNum);

                    try {
                        removeLineFromFile(line);
                    } catch (IOException ex) {
                        Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }
            clearTable();
            loadTable();
        } else {
            JOptionPane.showMessageDialog(this, "Incorrect Password", "Registration", JOptionPane.ERROR_MESSAGE, icon);
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    public static String readFile() throws FileNotFoundException, IOException {

        File file = new File("pass.txt");
        FileInputStream fis = new FileInputStream(file);
        byte[] data = new byte[(int) file.length()];
        fis.read(data);
        fis.close();

        String str = new String(data, "UTF-8");

        return str;
    }
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String input = JOptionPane.showInputDialog("Enter Password");
        String realPass = "";
        try {
            realPass = readFile();
        } catch (IOException ex) {
            Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (input.equals(realPass)) {
            try {
                allAbsent();
            } catch (IOException ex) {
                Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
            }
            clearTable();
            loadTable();
        } else {
            JOptionPane.showMessageDialog(this, "Incorrect Password", "Registration", JOptionPane.ERROR_MESSAGE, icon);
        }

    }//GEN-LAST:event_jButton5ActionPerformed
    public void allAbsent() throws IOException {

        Path path = Paths.get(filePath);
        Charset charset = StandardCharsets.UTF_8;

        String content = new String(Files.readAllBytes(path), charset);
        content = content.replaceAll("present", "absent");
        Files.write(path, content.getBytes(charset));

    }

    public void saveTable() throws Exception {
        BufferedWriter bfw = new BufferedWriter(new FileWriter(location));
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            bfw.write(jTable1.getColumnName(i));
            bfw.write("\t");
        }

        for (int i = 0; i < jTable1.getRowCount(); i++) {
            bfw.newLine();
            for (int j = 0; j < jTable1.getColumnCount(); j++) {
                bfw.write((String) (jTable1.getValueAt(i, j)));
                bfw.write("\t");;
            }
        }
        bfw.close();
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        boolean firstTime = true;
        for (int i = 0; i < 2; i++) {
            //We need to stop showing dialog twice on second loop

            BufferedReader reader = null;
            what();

            try {
                if (i == 0) {
                    JOptionPane.showMessageDialog(this, "Keep your finger on the sensor until the pop up appears", "Check In", JOptionPane.INFORMATION_MESSAGE, icon);
                }
                if (i == 0) {
                    ard.serialWrite("f");
                }

                id = ard.serialRead(0);
                if (id.equals("-1")) {
                    break;
                }
                System.out.println(id);
                File file = new File(filePath);
                Scanner scanner = new Scanner(file);
                String temporary = "";
                int lineNum = 0;
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine();

                    lineNum++;
                    id = id.replaceAll("\\s+", "");
                    if (line.contains(id)) {
                        temporary = line;
                        System.out.println("Found on line " + lineNum);
                        str = Files.readAllLines(Paths.get(filePath)).get(lineNum - 1);
                        removeLineFromFile(line);

                    }
                }
                temporary = temporary.replaceAll("absent", "present");
                addnewLine(temporary);

                String result = str.substring(str.indexOf("[") + 1, str.indexOf("]"));
                removeWhiteSpace();
                copyFile(temp2, filePath);
                if (i == 0) {
                    JOptionPane.showMessageDialog(this, "Welcome Back " + result, "Approved", JOptionPane.INFORMATION_MESSAGE, icon);
                }
                jTable1.setModel(new DefaultTableModel());
                loadTable();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch(Exception e){
                System.out.println("1");
            }

        }

    }//GEN-LAST:event_jButton3ActionPerformed
    public void what() {
        BufferedReader reader = null;
        ard.serialWrite("k");

    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String input = JOptionPane.showInputDialog("Enter Password");
        String realPass = "";
        try {
            realPass = readFile();
        } catch (IOException ex) {
            Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (input.equals(realPass)) {
            PrintWriter writer = null;
            try {
                writer = new PrintWriter(filePath);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
            }
            writer.print("");
            writer.close();
            ard.serialWrite("d");
            try {
                addnewLine("ID,Team,Name,Attendance");
            } catch (IOException ex) {
                Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                removeWhiteSpace();
            } catch (IOException ex) {
                Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
            }
            copyFile(temp2, filePath);
            clearTable();
            loadTable();
        } else {
            JOptionPane.showMessageDialog(this, "Incorrect Password", "Registration", JOptionPane.ERROR_MESSAGE, icon);
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            // TODO add your handling code here:
            saveTable();
            JOptionPane.showMessageDialog(this, "Table Saved! to " + location);
        } catch (Exception ex) {
            Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        clearTable();
        loadTable();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:

        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        int returnValue = jfc.showOpenDialog(null);
        // int returnValue = jfc.showSaveDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            
           location = selectedFile.getAbsolutePath();
            System.out.println(selectedFile.getAbsolutePath());
        }
        else{
            JOptionPane.showMessageDialog(this, "An Error Has Occured Please see Developer","Error",JOptionPane.ERROR_MESSAGE,icon);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                try {
                    new window().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
    }

    public void cloneFile() throws IOException {
        FileReader fr = null;
        FileWriter fw = null;
        try {
            fr = new FileReader("1.txt");
            fw = new FileWriter("2.txt");
            int c = fr.read();
            while (c != -1) {
                fw.write(c);
                c = fr.read();
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            fr.close();
            fw.close();
        }
    }

    public void removeWhiteSpace() throws FileNotFoundException, IOException {
        Scanner file;
        PrintWriter writer;

        try {

            file = new Scanner(new File(filePath));
            writer = new PrintWriter(temp2);

            while (file.hasNext()) {
                String line = file.nextLine();
                if (!line.isEmpty()) {
                    writer.write(line);
                    writer.write("\n");
                }
            }

            file.close();
            writer.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void loadTable() {

        File file = new File(filePath);

        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
            String[] columnsName = firstLine.split(",");
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setColumnIdentifiers(columnsName);
            Object[] tableLines = br.lines().toArray();
            for (int i = 0; i < tableLines.length; i++) {
                String line = tableLines[i].toString().trim();
                String[] dataRow = line.split("/");
                model.addRow(dataRow);
            }

        } catch (Exception ex) {
            Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void removeLineFromFile(String str) throws IOException {
        File inputFile = new File(filePath);
        File tempFile = new File("temp.txt");

        BufferedReader reader = new BufferedReader(new FileReader(inputFile));
        BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

        String lineToRemove = str;
        String currentLine;

        while ((currentLine = reader.readLine()) != null) {
            // trim newline when comparing with lineToRemove
            String trimmedLine = currentLine.trim();
            if (trimmedLine.equals(lineToRemove)) {
                continue;
            }
            writer.write(currentLine + System.getProperty("line.separator"));
        }
        writer.close();
        reader.close();
        boolean successful = tempFile.renameTo(inputFile);
        System.out.println(successful);
        copyFile(temp, filePath);
    }

    public void userInputPort() {
        String myString = "wmic path Win32_SerialPort Where \"Caption LIKE '%Arduino%'\" Get DeviceID";
        StringSelection stringSelection = new StringSelection(myString);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
        JOptionPane.showMessageDialog(this, "Run the copied command into command prompt \n[Command has already been copied for you] ", "Set Up", JOptionPane.INFORMATION_MESSAGE, icon);
    }

    public boolean isFound(String number) {

        File file = new File(filePath);

        try {
            Scanner scanner = new Scanner(file);

            //now read the file line by line...
            int lineNum = 0;
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                lineNum++;
                if (line.contains(number)) {

                    return true;
                }
            }

        } catch (FileNotFoundException e) {

        }
        return false;
    }

    public int getDifferentNumber(int id, Random r) {
        boolean flag = false;
        while (flag == false) {
            if (isFound(Integer.toString(id))) {
                id = r.nextInt(127) + 1;
                System.out.println("Try Again");
            } else {
                flag = true;
                System.out.println("Number is Good");
            }
        }
        return id;
    }

    public void registerFinger() {
        JOptionPane.showMessageDialog(this, "When the Green Light is on, place your finger on the sensor.\nWhen the Light is off take your finger off the sensor\n"
                + "After this has happened two time, click OK", "Registration!", JOptionPane.INFORMATION_MESSAGE, icon);

    }

    public String registerStudent(int id) {
        String firstName = JOptionPane.showInputDialog("What is your first name?");
        String lastName = JOptionPane.showInputDialog("What is your last name?");
        String team = JOptionPane.showInputDialog("What is your Team Number");
        return id + " /" + team + "/[" + firstName + " " + lastName + "]" + "/present";

    }

    public void addnewLine(String text) throws IOException {
        FileWriter fw = fw = new FileWriter(filePath, true);
        PrintWriter pw = new PrintWriter(fw);

        pw.write("\n" + text);
        pw.close();
        fw.close();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}//Self explanatory code no comments required
